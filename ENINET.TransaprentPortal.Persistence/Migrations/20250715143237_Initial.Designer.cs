// <auto-generated />
using System;
using ENINET.TransaprentPortal.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ENINET.TransparentPortal.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250715143237_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationGroup", b =>
                {
                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("GroupDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GroupName");

                    b.ToTable("ApplicationGroups");

                    b.HasData(
                        new
                        {
                            GroupName = "Administrators",
                            GroupDescription = "Administrators Group"
                        },
                        new
                        {
                            GroupName = "Contributors",
                            GroupDescription = "Users Group"
                        },
                        new
                        {
                            GroupName = "Viewers",
                            GroupDescription = "Viewers Group"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationPermission", b =>
                {
                    b.Property<string>("Permission")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Permission");

                    b.ToTable("ApplicationPermissions");

                    b.HasData(
                        new
                        {
                            Permission = "ADD_USER",
                            Description = "Aggiunge un utente all'applicazione"
                        },
                        new
                        {
                            Permission = "DELETE_USER",
                            Description = "Rimuove un utente all'applicazione"
                        },
                        new
                        {
                            Permission = "APPLICATION_USERS_MANAGE",
                            Description = "Gestione utenti applicazione"
                        },
                        new
                        {
                            Permission = "UPLOAD_REPORT",
                            Description = "Upload Report"
                        },
                        new
                        {
                            Permission = "DELETE_REPORT",
                            Description = "Delete Report"
                        },
                        new
                        {
                            Permission = "VIEW_REPORT",
                            Description = "View Report"
                        },
                        new
                        {
                            Permission = "DOWNLOAD_REPORT",
                            Description = "Download Report"
                        },
                        new
                        {
                            Permission = "VIEW_ELEMENTS",
                            Description = "View Elements"
                        },
                        new
                        {
                            Permission = "ADD_ELEMENTS",
                            Description = "Add Elements"
                        },
                        new
                        {
                            Permission = "DELETE_ELEMENTS",
                            Description = "Delete Elements"
                        },
                        new
                        {
                            Permission = "UPDATE_ELEMENTS",
                            Description = "Update Elements"
                        },
                        new
                        {
                            Permission = "VIEW_SITES",
                            Description = "View Sites"
                        },
                        new
                        {
                            Permission = "ADD_SITES",
                            Description = "Add Sites"
                        },
                        new
                        {
                            Permission = "DELETE_SITES",
                            Description = "Delete Sites"
                        },
                        new
                        {
                            Permission = "UPDATE_SITES",
                            Description = "Update Sites"
                        },
                        new
                        {
                            Permission = "VIEW_COMPLAINT",
                            Description = "View Complaint"
                        },
                        new
                        {
                            Permission = "ADD_COMPLAINT_OPERATION",
                            Description = "Add Complaint Operation"
                        },
                        new
                        {
                            Permission = "DELETE_COMPLAINT_OPERATION",
                            Description = "Delete Complaint Operation"
                        },
                        new
                        {
                            Permission = "UPDATE_COMPLAINT_OPERATION",
                            Description = "Update Complaint Operation"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            UserId = "vincenzo.caruso@external.enilive.com",
                            UserName = "vincenzo.caruso@external.enilive.com"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Element", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Elements");

                    b.HasData(
                        new
                        {
                            Name = "aria"
                        },
                        new
                        {
                            Name = "acqua"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.GroupPermission", b =>
                {
                    b.Property<string>("Permission")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("Permission", "GroupName");

                    b.HasIndex("GroupName");

                    b.ToTable("GroupPermissions");

                    b.HasData(
                        new
                        {
                            Permission = "ADD_USER",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "DELETE_USER",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "APPLICATION_USERS_MANAGE",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "UPLOAD_REPORT",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "DELETE_REPORT",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "VIEW_REPORT",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "DOWNLOAD_REPORT",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "VIEW_ELEMENTS",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "UPDATE_ELEMENTS",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "ADD_ELEMENTS",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "DELETE_ELEMENTS",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "VIEW_SITES",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "UPDATE_SITES",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "ADD_SITES",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "DELETE_SITES",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "ADD_COMPLAINT_OPERATION",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "DELETE_COMPLAINT_OPERATION",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "UPDATE_COMPLAINT_OPERATION",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "VIEW_COMPLAINT",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "UPLOAD_REPORT",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "DELETE_REPORT",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "VIEW_REPORT",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "DOWNLOAD_REPORT",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "VIEW_ELEMENTS",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "UPDATE_ELEMENTS",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "ADD_ELEMENTS",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "DELETE_ELEMENTS",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "VIEW_SITES",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "ADD_COMPLAINT_OPERATION",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "DELETE_COMPLAINT_OPERATION",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "UPDATE_COMPLAINT_OPERATION",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "VIEW_COMPLAINT",
                            GroupName = "Contributors"
                        },
                        new
                        {
                            Permission = "UPLOAD_REPORT",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "DELETE_REPORT",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "VIEW_REPORT",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "DOWNLOAD_REPORT",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "VIEW_ELEMENTS",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "VIEW_SITES",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "ADD_COMPLAINT_OPERATION",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "DELETE_COMPLAINT_OPERATION",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "UPDATE_COMPLAINT_OPERATION",
                            GroupName = "Viewers"
                        },
                        new
                        {
                            Permission = "VIEW_COMPLAINT",
                            GroupName = "Viewers"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Report", b =>
                {
                    b.Property<string>("FileName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long>("FileLength")
                        .HasColumnType("bigint");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Progressive")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserUpload")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("FileName");

                    b.HasIndex("Acronym");

                    b.HasIndex("ElementName");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Site", b =>
                {
                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Acronym");

                    b.ToTable("Sites");

                    b.HasData(
                        new
                        {
                            Acronym = "RO",
                            Description = "Sito di Rovigo",
                            Latitude = 0.0,
                            Longitude = 0.0
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.SitesUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Acronym");

                    b.HasIndex("Acronym");

                    b.ToTable("SitesUsers");

                    b.HasData(
                        new
                        {
                            UserId = "vincenzo.caruso@external.enilive.com",
                            Acronym = "RO"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.UserGroup", b =>
                {
                    b.Property<string>("Userid")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("Userid", "GroupName");

                    b.HasIndex("GroupName");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Userid = "vincenzo.caruso@external.enilive.com",
                            GroupName = "Administrators"
                        });
                });

            modelBuilder.Entity("ENINET.TransparentPortal.Persistence.Entities.Complaint", b =>
                {
                    b.Property<Guid>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OpenedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Opener")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ComplaintId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("ENINET.TransparentPortal.Persistence.Entities.ComplaintOperation", b =>
                {
                    b.Property<Guid>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OperationId");

                    b.ToTable("ComplaintOperations");

                    b.HasData(
                        new
                        {
                            OperationId = new Guid("1d0df814-5b06-42cd-9448-6be5191f2071"),
                            OperationName = "OPENED"
                        },
                        new
                        {
                            OperationId = new Guid("1618fcd2-d719-4e29-9336-d0e2d218cd25"),
                            OperationName = "SOLVED"
                        },
                        new
                        {
                            OperationId = new Guid("b10757d0-bf65-44db-9bae-841163c8c70b"),
                            OperationName = "CANCELED"
                        },
                        new
                        {
                            OperationId = new Guid("f5a0fabf-ec99-42ad-ac4a-78b6d32a71a2"),
                            OperationName = "ACTION"
                        });
                });

            modelBuilder.Entity("ENINET.TransparentPortal.Persistence.Entities.ComplaintStep", b =>
                {
                    b.Property<Guid>("ResolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComplaintId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<string>("OperationText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StepDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ResolutionId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("OperationId");

                    b.ToTable("ComplaintSteps");
                });

            modelBuilder.Entity("ENINET.TransparentPortal.Persistence.Entities.ElementSite", b =>
                {
                    b.Property<string>("ElementName")
                        .HasColumnType("text");

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<int>("MonthlyReport")
                        .HasColumnType("integer");

                    b.HasKey("ElementName", "Acronym");

                    b.HasIndex("Acronym");

                    b.ToTable("ElementsSite");

                    b.HasData(
                        new
                        {
                            ElementName = "aria",
                            Acronym = "RO",
                            MonthlyReport = 4
                        },
                        new
                        {
                            ElementName = "acqua",
                            Acronym = "RO",
                            MonthlyReport = 6
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.GroupPermission", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationGroup", "ApplicationGroup")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationPermission", "ApplicationPermission")
                        .WithMany()
                        .HasForeignKey("Permission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationPermission");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Report", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("Acronym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.SitesUser", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("Acronym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("SitesUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.UserGroup", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationGroup", "ApplicationGroup")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserGroups")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ENINET.TransparentPortal.Persistence.Entities.ComplaintStep", b =>
                {
                    b.HasOne("ENINET.TransparentPortal.Persistence.Entities.Complaint", "Complaint")
                        .WithMany("Steps")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransparentPortal.Persistence.Entities.ComplaintOperation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("ENINET.TransparentPortal.Persistence.Entities.ElementSite", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("Acronym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationGroup", b =>
                {
                    b.Navigation("GroupPermissions");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationUser", b =>
                {
                    b.Navigation("SitesUsers");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("ENINET.TransparentPortal.Persistence.Entities.Complaint", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
