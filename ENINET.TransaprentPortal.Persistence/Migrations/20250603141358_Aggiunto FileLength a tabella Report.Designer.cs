// <auto-generated />
using System;
using ENINET.TransaprentPortal.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ENINET.TransaprentPortal.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250603141358_Aggiunto FileLength a tabella Report")]
    partial class AggiuntoFileLengthatabellaReport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationGroup", b =>
                {
                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("GroupDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GroupName");

                    b.ToTable("ApplicationGroups");

                    b.HasData(
                        new
                        {
                            GroupName = "Administrators",
                            GroupDescription = "Administrators Group"
                        },
                        new
                        {
                            GroupName = "Users",
                            GroupDescription = "Users Group"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationPermission", b =>
                {
                    b.Property<string>("Permission")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Permission");

                    b.ToTable("ApplicationPermissions");

                    b.HasData(
                        new
                        {
                            Permission = "ADD_USER",
                            Description = "Aggiunge un utente all'applicazione"
                        },
                        new
                        {
                            Permission = "DELETE_USER",
                            Description = "Rimuove un utente all'applicazione"
                        },
                        new
                        {
                            Permission = "APPLICATION_USERS_MANAGE",
                            Description = "Gestione utenti applicazione"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            UserId = "vincenzo.caruso@external.enilive.com",
                            UserName = "vincenzo.caruso@external.enilive.com"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Element", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Name");

                    b.HasIndex("Acronym");

                    b.ToTable("Elements");

                    b.HasData(
                        new
                        {
                            Name = "aria",
                            Acronym = "RO"
                        },
                        new
                        {
                            Name = "acqua",
                            Acronym = "RO"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.GroupPermission", b =>
                {
                    b.Property<string>("Permission")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("Permission", "GroupName");

                    b.HasIndex("GroupName");

                    b.ToTable("GroupPermissions");

                    b.HasData(
                        new
                        {
                            Permission = "ADD_USER",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "DELETE_USER",
                            GroupName = "Administrators"
                        },
                        new
                        {
                            Permission = "APPLICATION_USERS_MANAGE",
                            GroupName = "Administrators"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Report", b =>
                {
                    b.Property<string>("FileName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long>("FileLength")
                        .HasColumnType("bigint");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Progressive")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserUpload")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("FileName");

                    b.HasIndex("Acronym");

                    b.HasIndex("ElementName");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Site", b =>
                {
                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Acronym");

                    b.ToTable("Sites");

                    b.HasData(
                        new
                        {
                            Acronym = "RO",
                            Description = "Sito di Rovigo"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.SitesUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Acronym");

                    b.HasIndex("Acronym");

                    b.ToTable("SitesUsers");

                    b.HasData(
                        new
                        {
                            UserId = "vincenzo.caruso@external.enilive.com",
                            Acronym = "RO"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.UserGroup", b =>
                {
                    b.Property<string>("Userid")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("Userid", "GroupName");

                    b.HasIndex("GroupName");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Userid = "vincenzo.caruso@external.enilive.com",
                            GroupName = "Administrators"
                        });
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Element", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("Acronym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.GroupPermission", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationGroup", "ApplicationGroup")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationPermission", "ApplicationPermission")
                        .WithMany()
                        .HasForeignKey("Permission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationPermission");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.Report", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("Acronym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.SitesUser", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("Acronym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("SitesUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.UserGroup", b =>
                {
                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationGroup", "ApplicationGroup")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENINET.TransaprentPortal.Persistence.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserGroups")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationGroup", b =>
                {
                    b.Navigation("GroupPermissions");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("ENINET.TransaprentPortal.Persistence.Entities.ApplicationUser", b =>
                {
                    b.Navigation("SitesUsers");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
